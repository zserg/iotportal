---
- hosts: '{{ target }}'
  vars_files:
    - vars.yml
  gather_facts: false
  become: yes

  tasks:
  - name: Create the project directory.
    file: state=directory path={{ project_root }}

  - name: Create user.
    user: home={{ project_root }}/home/
          name={{ project_name }}
          password=$1$SomeSalt$hNefXjRHS5V9yCxi9J0vk1
          state=present
    tags:
      - initial

  - name: Update the project directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}

  - name: Create the code directory
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}/code/

  # - name: Install required system packages.
  #   apt: pkg={{ item }} state=installed update-cache=yes
  #   with_items: '{{ system_packages }}'

  # - name: Install required Python packages.
  #   easy_install: name={{ item }} executable=easy_install
  #   with_items: '{{ python_packages }}'

  - name: Change permissions.
    shell: chown -R {{ project_name }}:{{ project_name }} {{ project_root }}

  - name: Create Postgreql database
    postgresql_db: name=iotportal
    sudo: yes
    sudo_user: postgres

  - name: Create Postgreql database user
    postgresql_user: db=iotportal name={{ DBUSER }} priv=all state=present
    postgresql_user: name={{ DBUSER }}  role_attr_flags=NOSUPERUSER,CREATEDB
    sudo: yes
    sudo_user: postgres

  - name: Copy ca certificate
    copy: src=ca.crt dest={{ project_root }}/code/ca.crt

  - name: Add env to .profile
    lineinfile:
       dest={{ project_root }}/home/.profile
       line="REQUESTS_CA_BUNDLE={{ project_root }}/code/ca.crt"

  # setup nginx
  # - name: Remove default config symlink
  #   file:
  #     path: /etc/nginx/sites-enabled/default
  #     state: absent

  # - name: Install nginx configuration file.
  #   copy: src={{ project_name }}.nginxconf dest=/etc/nginx/sites-enabled/{{ project_name }}

  # - name: Install nginx ssl files.
  #   copy:
  #     src={{ item }}
  #     dest=/etc/ssl/{{ item }}
  #     group={{ project_name }}
  #     owner={{ project_name }}
  #     mode="u=r,g-rwx,o-rwx"
  #   with_items:
  #     - "{{ project_name }}.crt"
  #     - "{{ project_name }}.key"
  #   notify: restart nginx

  # - name: Install gunicorn configuration file.
  #   copy: src={{ item }} dest=/etc/systemd/system/{{ item }}
  #   with_items:
  #     - gunicorn.service
  #     - gunicorn.socket
  #   #notify: restart gunicorn

  # - name: Enable gunicorn service
  #   service: name=gunicorn enabled=yes

  # - name: Create /run/gunicorn
  #   file: path=/run/gunicorn state=directory

  # - name: Change permissions for gunicorn.
  #   shell: chown -R {{project_name }}:{{ project_name }} /run/gunicorn


  # handlers:
  #   - include: handlers.yml

- include: deploy.yml

- hosts: '{{ target }}'
  vars_files:
    - vars.yml
  gather_facts: false
  sudo: true

  # tasks:
  # - name: Restart services.
  #   service: name={{ item }} state=restarted
  #   with_items: "{{ initfiles }}"
